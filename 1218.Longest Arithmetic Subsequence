1218. Longest Arithmetic Subsequence of Given Difference

/PROBLEM STATEMENT/
Given an integer array arr and an integer difference,
return the length of the longest subsequence in arr 
which is an arithmetic sequence such that the difference
between adjacent elements in the subsequence equals difference.

/INTUITION/

/Brute Force/
1.In this approach, we have to traverse all the elements one by one and check if it will be in the sequence
here Time complexity :-O(nxn)
2. Another method is by doing the same as we do in Longest common subsequence.

/Optimized Solution/
In this, the intuition is to use a HASHMAP. 
It starts with iterating over each element and checking if there is already any element present which is (curr_ele - diff) i.e suitable for the 
sequence. If there is then add the value of that element to the current element + 1. Otherwise simply add 1.

Here is the c++ code.

int longestSubsequence(vector<int>& arr, int difference) {
        std::unordered_map<int,int> m;
        int ans = 1;
        for(int i=0;i<arr.size();i++)
        {
            if(m.find(arr[i]-difference)!=m.end())
            {
                m[arr[i]] =1+m[arr[i]-difference];
                // cout<<m[arr[i]]<<" ";
                ans = std::max(ans,m[arr[i]]);
            }
            else
            {
                m[arr[i]] = 1;
            }
        }
        return ans;
    }

