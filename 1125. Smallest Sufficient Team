/QUESTION/
In a project, you have a list of required skills req_skills, and a list of people.
The ith person people[i] contains a list of skills that the person has.

Consider a sufficient team: a set of people such that for every required
skill in req_skills, there is at least one person in the team who has that skill.
We can represent these teams by the index of each person.

For example, team = [0, 1, 3] represents the people with skills people[0],
people[1], and people[3].Return any sufficient team of the smallest possible size,
represented by the index of each person. You may return the answer in any order.

It is guaranteed an answer exists.

/ANSWER/
Literally copied the code lol
have no idea how the solution works so far.
vector<int> smallestSufficientTeam(vector<string>& reqSkills, vector<vector<string>>& people) {
    unordered_map<string, int> skillIdxMap;
    for (int i = 0; i < reqSkills.size(); i++) {
        skillIdxMap[reqSkills[i]] = i;
    }

    unordered_map<int, vector<int>> dp;
    dp[0] = {};

    for (int pIdx = 0; pIdx < people.size(); pIdx++) {
        int personSkillsBits = 0;
        for (int i = 0; i < people[pIdx].size(); i++) {
            personSkillsBits |= (1 << skillIdxMap[people[pIdx][i]]);
        }

        vector<int> tasks;
        for (const auto& entry : dp) {
            tasks.push_back(entry.first);
        }

        for (int i = 0; i < tasks.size(); i++) {
            int newTasks = tasks[i] | personSkillsBits;
            if (dp.find(newTasks) == dp.end() || (dp[newTasks].size() > dp[tasks[i]].size() + 1)) {
                dp[newTasks] = dp[tasks[i]];
                dp[newTasks].push_back(pIdx);
            }
        }
    }

    return dp[(1 << reqSkills.size()) - 1];
}
