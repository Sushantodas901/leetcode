/QUESTION/
There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.


/C++ CODE IMPLEMENTATATION/
class Solution {
public:
    int solve(vector<vector<int>>&dp,int &m,int &n,int i,int j)
    {
        if(i<0 || j<0 || i>=m || j>=n)return 0;
        if(i==m-1 and j==n-1)return dp[i][j] = 1;
        if(dp[i][j]!=0)
        {
            return dp[i][j];
        }
        return dp[i][j] =   solve(dp,m,n,i+1,j) + solve(dp,m,n,i,j+1);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m,vector<int>(n,0));
        return solve(dp,m,n,0,0);
    }
};
