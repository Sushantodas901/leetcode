/QUESTION/
There are n items each belonging to zero or one of m groups where group[i] is the group that the i-th item belongs to and it's equal
to -1 if the i-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.
Return a sorted list of the items such that:
The items that belong to the same group are next to each other in the sorted list.
There are some relations between these items where beforeItems[i] is a list containing all the items that should come before
the i-th item in the sorted array (to the left of the i-th item).
Return any solution if there is more than one solution and return an empty list if there is no solution.

/C++ CODE IMPLEMENTATION/
class Solution {
public:
    bool topoSort(vector<int>adjList[],vector<int>&topo,vector<int>&indegree)
    {
        queue<int> q;
        for(int i=0;i<indegree.size();i++)
        {
            if(indegree[i]==0)
            {
                q.push(i);
            }
        }
        while(!q.empty())
        {
            int current = q.front();
            q.pop();
            topo.push_back(current);
            for(int v:adjList[current])
            {
                indegree[v]--;
                if(indegree[v]==0)
                {
                    q.push(v);
                }
            }
        }
        return topo.size()==indegree.size();
    }

    vector<int> sortItems(int n, int m, vector<int>& group, vector<vector<int>>& beforeItems) {
        int gid = m;
        for(int i=0;i<n;i++)
        {
            if(group[i]==-1)
            {
                group[i] = gid;
                gid++;
            }
        }
        vector<int> indegreeItem(n,0),gIn(gid,0);
        vector<int> adjItem[n],gadjList[gid];

        for(int j=0;j<n;j++)
        {
            for(int i:beforeItems[j])
            {
                adjItem[i].push_back(j);
                indegreeItem[j]++;
                if(group[i]!=group[j])
                {
                    gadjList[group[i]].push_back(group[j]);
                    gIn[group[j]]++;
                }
            }
        }
        vector<int> itemsTopo, groupsTopo;
        bool itemstopoTemp = topoSort(adjItem,itemsTopo,indegreeItem);
        bool groupstopoTemp = topoSort(gadjList,groupsTopo,gIn);

        if(itemstopoTemp==0 || groupstopoTemp==0)
        {
            return {};
        }

        unordered_map<int,vector<int>> mp;
        for(auto it:itemsTopo)
        {
            mp[group[it]].push_back(it);
        }
        vector<int> ans;
        for(auto it:groupsTopo)
        {
            vector<int> temp = mp[it];
            for(int i:temp)
            {
                ans.push_back(i);
            }
        }
        return ans;
    }
};
